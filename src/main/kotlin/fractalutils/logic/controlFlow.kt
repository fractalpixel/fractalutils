package fractalutils.logic

/*
    Extension functions to provide tertiary operations to various expressions.
 */

/**
 * @return [valueIfTrue] if the boolean is true, [valueIfFalse] otherwise.
 */
fun <T>Boolean.ifElse(valueIfTrue: T, valueIfFalse: T): T {
    return if (this) {
        valueIfTrue
    }
    else {
        valueIfFalse
    }
}

/**
 * @return the result of the [valueIfTrue] block if the boolean is true, the result of the [valueIfFalse] block otherwise.
 */
inline fun <T>Boolean.ifElse(valueIfTrue: () -> T, valueIfFalse: () -> T): T {
    return if (this) {
        valueIfTrue()
    }
    else {
        valueIfFalse()
    }
}

/**
 * @return if the expression is true, the value generated by the expression (taking this value as a recipient parameter), otherwise this value.
 */
inline fun <T>T.orIf(expression: (T) -> Boolean, valueFun: T.() ->T): T {
    return if (expression(this)) {
        this.valueFun()
    }
    else {
        this
    }
}

/**
 * Run the specified block and return its value if this is true, return null if this is false.
 */
inline fun <T>Boolean.ifTrue(blockIfTrue: () -> T): T? {
    return if (this) {
        blockIfTrue()
    }
    else {
        null
    }
}

/**
 * Run the specified block and return its value if this is false, return null if this is true.
 */
inline fun <T>Boolean.ifFalse(blockIfFalse: () -> T): T? {
    return if (!this) {
        blockIfFalse()
    }
    else {
        null
    }
}
